@page "/"
@using Blogger.Models
@using Microsoft.EntityFrameworkCore
@inject BlogDbContext BlogDbContext

<PageTitle>Index</PageTitle>

<button class="btn btn-danger"
        @onclick="DbInitAsync">
    重新建立資料庫
</button>
<h2>@Messages</h2>

<button class="btn btn-primary"
        @onclick="DbCrudAsync">
    資料庫 CRUD 操作
</button>
@foreach (var item in BlogPosts)
{
    <div class="row">
        <div class="col">
            @item.Id
        </div>
        <div class="col">
            @item.Title
        </div>
    </div>
}

@code {
    public string Messages { get; set; }
    public List<BlogPost> BlogPosts { get; set; } = new List<BlogPost>();

    async Task DbInitAsync()
    {
        Messages = "準備刪除資料庫";
        await Task.Yield();
        BlogDbContext.Database.EnsureDeleted();
        Messages = "準備建立資料庫";
        StateHasChanged();
        await Task.Yield();
        BlogDbContext.Database.EnsureCreated();
        Messages = "資料庫已經建立成功";
        StateHasChanged();
        await Task.Yield();
        Messages = "產生測試用的紀錄";
        await RecordInitAsync();
        Messages = "資料庫初始化作業完成";
    }
    async Task RecordInitAsync()
    {
        for (int i = 0; i < 5; i++)
        {
            BlogPost blogPost = new BlogPost()
            {
                PublishDate = DateTime.Now.AddDays(-1 * i),
                Text = $"部落格文章內容 {i}",
                Title = $"部落格文章主題 {i}",
            };
            await BlogDbContext.BlogPost.AddAsync(blogPost);
        }
        await BlogDbContext.SaveChangesAsync();

        for (int i = 0; i < 5; i++)
        {
            MyUser myUser = new MyUser()
            {
                Account = $"user{i}",
                Password = $"pw",
            };
            await BlogDbContext.MyUser.AddAsync(myUser);
        }
        await BlogDbContext.SaveChangesAsync();
    }

    async Task DbCrudAsync()
    {
        await RetriveAsync();

        BlogPost AddRecord = await CreateAsync();

        BlogPost updateRecord = await UpdateAsync(AddRecord);

        await DeleteAsync(AddRecord);
    }
    async Task RetriveAsync()
    {
        #region Retrive 查詢資料庫紀錄
        Messages = "取得資料庫內所有紀錄";
        StateHasChanged();
        BlogPosts = await BlogDbContext.BlogPost
            .ToListAsync();
        StateHasChanged();
        await Task.Delay(1000);
        #endregion
    }
    async Task<BlogPost> CreateAsync()
    {
        #region Create 新增資料庫紀錄
        Messages = "準備新增紀錄";
        StateHasChanged();
        BlogPost blogPost = new()
            {
                Title = "新增一筆紀錄 ",
                Text = "新增部落格文章內容",
                PublishDate = DateTime.Now,
            };
        await BlogDbContext.BlogPost.AddAsync(blogPost);
        await BlogDbContext.SaveChangesAsync();
        await Task.Delay(3000);
        await RetriveAsync();
        return blogPost;
        #endregion
    }
    async Task<BlogPost> UpdateAsync(BlogPost blogPost)
    {
        #region Update 更新資料庫紀錄
        Messages = "準備更新紀錄";
        StateHasChanged();
        blogPost.Title = "該筆紀錄已經更新";
        BlogDbContext.BlogPost.Update(blogPost);
        await BlogDbContext.SaveChangesAsync();
        await Task.Delay(3000);
        await RetriveAsync();
        return blogPost;
        #endregion
    }
    async Task DeleteAsync(BlogPost blogPost)
    {
        #region 刪除資料庫紀錄
        Messages = "準備刪除紀錄";
        StateHasChanged();
        BlogDbContext.BlogPost.Remove(blogPost);
        await BlogDbContext.SaveChangesAsync();
        await Task.Delay(3000);
        await RetriveAsync();
        #endregion
    }
}
